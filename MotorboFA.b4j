AppType=StandardJava
Build1=Default,b4j.example
Group=Default Group
Library1=jcore
Library2=jnetwork
Library3=jrandomaccessfile
Module1=Define
Module2=Encrypt
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=2
Version=9
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
#End Region

Sub Process_Globals
	Private mTcp As Socket
	Private astream As AsyncStreams
	Private mIsConnected As Boolean
	Private State As Int
	Private enc As Encrypt
	Private tim1 As Timer
End Sub

Sub AppStart (Args() As String)
	'Log("Hello world!!!")
	enc.Initialize
	tim1.Initialize("tim1", 3000)
	tim1.Enabled = True
	mIsConnected = False
	mTcp.Initialize("mtcp")
	mTcp.Connect("192.168.10.1", 8002, 3000)
	StartMessageLoop
End Sub

Private Sub mtcp_Connected (Successful As Boolean)
	Log(Successful)
	mIsConnected = Successful
	If mIsConnected = True Then
		tim1.Enabled = False
		astream.Initialize( mTcp.InputStream,mTcp.OutputStream,"astream")
	End If
End Sub

Private Sub astream_NewData(Buffer() As Byte)
	Dim buf(), buf1() As Byte
	Dim random_num(8) As Byte
	Dim v(2), w(2) As Long
	Dim tmp1, tmp2 As Int
	
	Select Buffer(3)
		Case 2
			buf = Array As Byte(0x00,0x0C,0x00,0x04,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00)
			astream.Write(buf)
		Case 5
			buf = Array As Byte(0x00,0x18,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00)
			buf(8) = Buffer(13)
			buf(9) = Buffer(14)
			buf(16) = 0x0A
			buf(17) = 0x01
			For i = 0 To 7
				random_num(i) = ToUnsigned(Buffer(15+i))
			Next
			random_num(0) = 0x72'Bit.UnsignedShiftRight(w(0), 24)
			random_num(1) = 0xA4'Bit.UnsignedShiftRight(Bit.And(w(0), 0xFF0000), 16)
			random_num(2) = 0x1F'Bit.UnsignedShiftRight(Bit.And(w(0), 0xFF00), 8)
			random_num(3) = 0x8F'Bit.UnsignedShiftRight(Bit.And(w(0), 0xFF), 0)
			random_num(4) = 0x63'Bit.UnsignedShiftRight(w(1), 24)
			random_num(5) = 0x66'Bit.UnsignedShiftRight(Bit.And(w(1), 0xFF0000), 16)
			random_num(6) = 0x01'Bit.UnsignedShiftRight(Bit.And(w(1), 0xFF00), 8)
			random_num(7) = 0xAA'Bit.UnsignedShiftRight(Bit.And(w(1), 0xFF), 0)
	    
			v(0) = Bit.ShiftLeft(ToUnsigned(random_num(0)), 24)
			v(0) = Bit.Or(v(0), Bit.ShiftLeft(ToUnsigned(random_num(1)), 16))
			v(0) = Bit.Or(v(0), Bit.ShiftLeft(ToUnsigned(random_num(2)), 8))
			v(0) = Bit.Or(v(0), Bit.ShiftLeft(ToUnsigned(random_num(3)), 0))

			v(1) = Bit.ShiftLeft(ToUnsigned(random_num(4)), 24)
			v(1) = Bit.Or(v(1), Bit.ShiftLeft(ToUnsigned(random_num(5)), 16))
			v(1) = Bit.Or(v(1), Bit.ShiftLeft(ToUnsigned(random_num(6)), 8))
			v(1) = Bit.Or(v(1), Bit.ShiftLeft(ToUnsigned(random_num(7)), 0))
			
			enc.encipher(v, w)

			random_num(0) = Bit.UnsignedShiftRight(w(0), 24)
			random_num(1) = Bit.UnsignedShiftRight(Bit.And(w(0), 0xFF0000), 16)
			random_num(2) = Bit.UnsignedShiftRight(Bit.And(w(0), 0xFF00), 8)
			random_num(3) = Bit.UnsignedShiftRight(Bit.And(w(0), 0xFF), 0)
			random_num(4) = Bit.UnsignedShiftRight(w(1), 24)
			random_num(5) = Bit.UnsignedShiftRight(Bit.And(w(1), 0xFF0000), 16)
			random_num(6) = Bit.UnsignedShiftRight(Bit.And(w(1), 0xFF00), 8)
			random_num(7) = Bit.UnsignedShiftRight(Bit.And(w(1), 0xFF), 0)
			
			For i = 0 To 7
				buf(18+i) = random_num(i)
			Next
			astream.Write(buf)
			State = 2
		Case 7
			Log("Case 7")
			Define.idBase1 = Buffer(14)
			Define.myId1(0) = Buffer(15)
			Define.myId1(1) = Buffer(16)
			Define.xnl_message1(4) = 1
			Define.xnl_message1(6) = 0
			Define.xnl_message1(7) = 6
			
			Define.xnl_message1(8) = Buffer(15)
			Define.xnl_message1(9) = Buffer(16)
			Define.xnl_message1(10) = Buffer(14)
			
			State = 3
'					
		Case 9
			State = 4
			Log("Case 9")
		Case 0x0B
			If State = 4 Then
				State = 5
				buf =	Array As Byte( 0x00,0x0C,0x00,0x0C,0x01,0x00,0x00,0x06,0x00,0x01,0x01,0x03,0x00,0x00)
				buf(4) = Buffer(3)
				buf(5) = Buffer(4)
				buf(8) = Define.myId1(0)
				buf(9) = Define.myId1(1)
				buf(10) = Buffer(9)
				buf(11) = Buffer(10)
				astream.Write(buf)
				
				buf1 =	Array As Byte(0x00,0x1B,0x00,0x0B,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0F,0xB4,0x00,0x00,0x00,0x00,0x01,0x00,0x0A,0x00,0x00,0x04,0x00,0x00,0x02,0xFF)

				Define.xnlFlagCounter1 = Define.xnlFlagCounter1 + 1
				buf1(5) = Bit.And(Define.xnlFlagCounter1, 0x07)
				buf1(8) = Define.myId1(0)
				buf1(9) = Define.myId1(1)
				buf1(10) = Define.idBase1
				buf1(11) = Define.transactID1
				Define.transactID1 = Define.transactID1 + 1
				astream.Write(buf1)
			else if State = 6 Then
				State = 7
				Log("7")
				buf =	Array As Byte( 0x00,0x0C,0x00,0x0C,0x01,0x00,0x00,0x06,0x00,0x01,0x01,0x03,0x00,0x00)
				buf(4) = Buffer(3)
				buf(5) = Buffer(4)
				buf(10) = Buffer(9)
				buf(11) = Buffer(10)
				astream.Write(buf)
			End If
		Case 0x0C
			State = 6
		Case Else
			Log("What is it???")
	End Select
		
	'Log(BytesToString( Buffer, 0, Buffer.Length,"utf8" ))
End Sub

Private Sub astream_Terminated
	mIsConnected = False
End Sub

Private Sub astream_Error
	astream_Terminated
End Sub

Public Sub ToUnsigned(b As Byte) As Int
	Return Bit.And(0xFF, b)
End Sub

Public Sub tim1_Tick()
	mTcp.Connect("192.168.10.1", 8002, 3000)
End Sub

